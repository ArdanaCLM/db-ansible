#
# (c) Copyright 2017-2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---
- name: FND-MDB | galera_bootstrap | Check mysql status
  become: yes
  shell: >
    service "{{ mysql_service }}" status
  register: mysql_service_status_result
  ignore_errors: yes

- name: FND-MDB | galera_bootstrap | Check "{{ mysql_service }}" process
  become: yes
  shell: >
    ps -ef | grep "{{ mysql_binary }}" | grep -v grep
  register: mysql_process_status_result
  ignore_errors: yes

# NOTE(gyee): According to
#
# http://galeracluster.com/documentation-webpages/restartingcluster.html
#
# , if the node is down, we'll need to run 'mysqld_safe --wsrep_recover'
# to recover the last transaction ID. However, if the cluster is not
# completely down (i.e. only some nodes are down), running mysqld_safe is
# harmless as we won't need to use the recovered transaction ID. We'll
# simply bring up the down nodes and have them rejoin the cluster.
- name: FND-MDB | galera_bootstrap | Generate recovered position
  become: yes
  shell: >
    "{{ mysql_safe_binary }}" --wsrep_recover
  when: mysql_process_status_result.stdout == ""

- name: FND-MDB | galera_bootstrap | Look up recovered position
  become: yes
  shell: >
    grep 'WSREP: Recovered position: ' "{{ mysql_log_error }}" | tail -1 |
    sed 's/.*Recovered position: //'
  register: recovered_position_result
  when: mysql_process_status_result.stdout == ""

- name: FND-MDB | galera_bootstrap | Lookup safe_to_bootstrap
  become: yes
  shell: >
    cat "{{ mysql_galera_state_file }}" | grep safe_to_bootstrap |
    awk '{print $2}'
  register: safe_to_bootstrap_result

- name: FND-MDB | galera_bootstrap | Lookup seqno
  become: yes
  shell: >
    cat "{{ mysql_galera_state_file }}" | grep seqno |
    awk '{print $2}'
  register: seqno_result

- name: FND-MDB | galera_bootstrap | Collect together required attrs
  set_fact:
    galera_bootstrap_info:
      mysql_process_status_result: "{{ mysql_process_status_result }}"
      mysql_service_status_result: "{{ mysql_service_status_result }}"
      recovered_position_result: "{{ recovered_position_result }}"
      safe_to_bootstrap_result: "{{ safe_to_bootstrap_result }}"
      seqno_result: "{{ seqno_result }}"

- name: FND-MDB | galera_bootstrap | Find bootstrap host
  find_galera_mariadb_bootstrap_host:
    # SOC-10521 - collate the collected information into a "fake" hostvars
    # that doesn't trip ansible undefined attrs when used as part of the
    # ardana-upgrade.yml playbook
    hostvars: >-
      {%- set _gmbh_list = [] -%}
      {%- for h in mysql_mdb_hosts -%}
      {%-   set _ = _gmbh_list.append((h, hostvars[h].galera_bootstrap_info)) -%}
      {%- endfor -%}
      {{- dict(_gmbh_list) -}}
    mdb_hosts: "{{ mysql_mdb_hosts }}"
  register: find_bootstrap_host_result

- name: FND-MDB | galera_bootstrap | Print bootstrap_host
  debug:
    msg: "{{ find_bootstrap_host_result.bootstrap_host }}"
  run_once: yes

- name: FND-MDB | galera_bootstrap | Print hosts_to_start
  debug:
    msg: "{{ find_bootstrap_host_result.hosts_to_start }}"
  run_once: yes

- name: FND-MDB | galera_bootstrap | Print need_recovery
  debug:
    msg: "{{ find_bootstrap_host_result.need_recovery }}"
  run_once: yes

- name: FND-MDB | galera_bootstrap | Set wsrep_cluster_address on master
  become: yes
  copy:
    dest: "{{ mysql_override_conf_file }}"
    content: |-
      [mysqld]
      wsrep_cluster_address = gcomm://
  when:
    inventory_hostname == "{{ find_bootstrap_host_result.bootstrap_host }}"

- name: FND-MDB | galera_bootstrap | Update uuid on master
  become: yes
  replace:
    dest: "{{ mysql_galera_state_file }}"
    regexp: '^uuid: .*'
    replace: 'uuid: {{ find_bootstrap_host_result.recovered_uuid }}'
  when:
    (inventory_hostname ==
      "{{ find_bootstrap_host_result.bootstrap_host }}" and
      find_bootstrap_host_result.need_recovery)

- name: FND-MDB | galera_bootstrap | Update seqno on master
  become: yes
  replace:
    dest: "{{ mysql_galera_state_file }}"
    regexp: '^seqno: .*'
    replace: 'seqno: {{ find_bootstrap_host_result.recovered_seqno }}'
  when:
    (inventory_hostname ==
      "{{ find_bootstrap_host_result.bootstrap_host }}" and
      find_bootstrap_host_result.need_recovery)

- name: FND-MDB | galera_bootstrap | Update safe_to_bootstrap on master
  become: yes
  replace:
    dest: "{{ mysql_galera_state_file }}"
    regexp: '^safe_to_bootstrap: .*'
    replace: 'safe_to_bootstrap: 1'
  when:
    inventory_hostname == "{{ find_bootstrap_host_result.bootstrap_host }}"

- name: FND-MDB | galera_bootstrap | Re-copy 75-galera.cnf
  include: _install_conf_files.yml

- name: FND-MDB | galera_bootstrap | Start mysql on master
  include: galera_start_on_hosts.yml
  vars:
    mysql_hosts_to_start:
      - "{{ find_bootstrap_host_result.bootstrap_host }}"
  when:
    inventory_hostname == "{{ find_bootstrap_host_result.bootstrap_host }}"

- name: FND-MDB | galera_bootstrap | Start mysql on non-master
  include: galera_start_on_hosts.yml
  vars:
    mysql_hosts_to_start: "{{ find_bootstrap_host_result.hosts_to_start }}"

- name: FND-MDB | galera_bootstrap | Restore wsrep_cluster_address on master
  become: yes
  file:
    path: "{{ mysql_override_conf_file }}"
    state: absent
  when:
    inventory_hostname == "{{ find_bootstrap_host_result.bootstrap_host }}"

- name: FND-MDB | galera_bootstrap | Restart master node to join cluster
  include: galera_start_on_hosts.yml
  vars:
    mysql_start_state: "restarted"
    mysql_hosts_to_start:
      - "{{ find_bootstrap_host_result.bootstrap_host }}"
  when:
    inventory_hostname == "{{ find_bootstrap_host_result.bootstrap_host }}"
